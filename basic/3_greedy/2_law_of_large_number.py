"""
2. 큰수의 법칙
[2, 4, 5, 4, 6] 이란 길이가 N=5인 배열이 있을때 
더하는 총횟수가 M=8, 
연속해서 더해줄수있는 횟수K=3 라면
6+6+6+5+6+6+6+5 = 46이 리턴되야함
[3, 4, 3, 4, 3], M= 7, K=2 이면 답은 28
"""

# 비효율적인버전

# N, M, K를 공백을 기준으로 구분하여 입력 받기
n, m, k = map(int, '5 8 3'.split())
# N개의 수를 공백을 기준으로 구분하여 입력 받기
data = list(map(int, '2 4 5 4 6'.split()))

data.sort() # 입력 받은 수들 정렬하기
first = data[n - 1] # 가장 큰 수
second = data[n - 2] # 두 번째로 큰 수

result = 0

while True:
    for _ in range(k): # 가장 큰 수를 K번 더하기
        if m == 0: # m이 0이라면 반복문 탈출
            break
        result += first
        m -= 1 # 더할때마다 1씩빼기
    if m == 0: # m이 0이라면 반복문 탈출
        break
    result += second # 두번째로 큰수를 한번 더하기
    m -= 1 # 더할때마다 1씩 빼기

print(result)

# m이 100억이상 커지면 m이 0이될때까지 100억번돌려야되서 존나느림

# ----------------------------------------------------------------------------#
# ----------------------------------------------------------------------------#
# ----------------------------------------------------------------------------#

# 효율적인버전

# N, M, K를 공백을 기준으로 구분하여 입력 받기
n, m, k = map(int, '5 8 3'.split())
# N개의 수를 공백을 기준으로 구분하여 입력 받기
data = list(map(int, '2 4 5 4 6'.split()))

data.sort() # 입력 받은 수들 정렬하기
first = data[n - 1] # 가장 큰 수
second = data[n - 2] # 두 번째로 큰 수

# 가장 큰 수가 더해지는 횟수 계산
count = int(m / (k + 1)) * k
count += m % (k + 1)

result = 0
result += (count) * first # 가장 큰 수 더하기
result += (m - count) * second # 두 번째로 큰 수 더하기

print(result)


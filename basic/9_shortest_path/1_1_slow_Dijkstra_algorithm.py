# 최단 경로 문제는 보통 그래프를 이용해 표현하는데 각 지점은 그래프에서 ‘노드’로 표현되고, 지점간 연결된 도로는 그래프에서 ‘간선’으로 표현된다. 
# 실제 코딩 테스트에서는 최단 경로를 모두 출력하는 문제보다는 단순히 최단 거리를 출력하도록 요구하는 문제가 많이 출제된다.

# 컴퓨터공학과 학부 수준에서 사용하는 최단 거리 알고리즘은 "다익스트라 최단 경로 알고리즘", "플로이드 워셜", "벨만 포드 알고리즘", 이렇게 3 가지이다. 이 책에서는 이 중에 다익스트라 최단 경로와 플로이드 워셜 알고리즘 유형만 다루려 한다. 이 2 가지가 코딩 테스트에서 가장 많이 등장하는 유형이다.
# 더불어 앞서 공부한 그리디 알고리즘과 다이나믹 프로그래밍 알고리즘이 최단 경로 알고리즘에 주요 알고리즘 이론과 실전 문제그대로 적용된다는 특징이 있다. 다시 말해 이번 장에서 배우는 내용은 사실 그리디 알고리즘 및 다이나믹 프로그래밍 알고리즘의 한 유형으로 볼 수 있다.


# 1 출발 노드를 설정한다.
# 2 최단 거리 테이블을 초기화한다.
# 3 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
# 4 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
# 5 위 과정에서 3 과 4 번을 반복한다.
# 다익스트라 알고리즘은 최단 경로를 구하는 과정에서 ‘각 노드에 대한 현재까지의 최단 거리’ 정보를 항상 1 차원 리스트에 저장하며 리스트를 계속 갱신한다는 특징이 있다.**

# 현재 최단 거리가 가장 짧은 노드를 확인’해 그 노드에 대하여 4 번 과정을 수행한다는 점에서 그리디 알고리즘으로 볼 수 있다.(현재의 노드만 확인해서 그리디알고리즘임)


INF = int(1e9) # 무한을 의미하는 값으로 10억을 설정

# 노드의 개수, 간선의 개수를 입력받기
n, m = 6, 11
# 시작 노드 번호를 입력받기
start = 1
# 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n + 1)]
# 방문한 적이 있는지 체크하는 목적의 리스트를 만들기
visited = [False] * (n + 1)
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n + 1)

data = [
    '1 2 3', '1 3 5', '1 4 1', '2 3 3',
    '2 4 2', '3 2 3', '3 6 5', '4 3 3',
    '4 5 1', '5 3 1', '5 6 2'
    ]


# 모든 간선 정보를 입력받기
for d in data:
    a, b, c = map(int, d.split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b, c))


# 방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    min_value = INF
    index = 0 # 가장 최단 거리가 짧은 노드(인덱스)
    for i in range(1, n + 1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index


def dijkstra(start):
    # 시작 노드에 대해서 초기화
    distance[start] = 0
    visited[start] = True
    for j in graph[start]:
        distance[j[0]] = j[1]
    # 시작 노드를 제외한 전체 n - 1개의 노드에 대해 반복
    for i in range(n - 1):
        # 현재 최단 거리가 가장 짧은 노드를 꺼내서, 방문 처리
        now = get_smallest_node()
        visited[now] = True
        # 현재 노드와 연결된 다른 노드를 확인
        for j in graph[now]:
            cost = distance[now] + j[1]
            # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost

# 다익스트라 알고리즘을 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n + 1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 거리를 출력
    else:
        print(distance[i])

